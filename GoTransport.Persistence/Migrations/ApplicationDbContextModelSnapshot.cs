// <auto-generated />
using System;
using GoTransport.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoTransport.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Modern_Spanish_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Point", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("POINT_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Detail")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DETAIL")
                        .HasColumnOrder(3);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("PointId");

                    b.HasIndex("CityId");

                    b.ToTable("APP_POINT", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RESERVATION_ID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Detail")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DETAIL")
                        .HasColumnOrder(8);

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("IDENTIFICATION_TYPE_ID")
                        .HasColumnOrder(6);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("PassengerFirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PASSENGER_FIRST_NAME")
                        .HasColumnOrder(4);

                    b.Property<string>("PassengerIdentification")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PASSENGER_IDENTIFICATION")
                        .HasColumnOrder(7);

                    b.Property<string>("PassengerLastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PASSENGER_LAST_NAME")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("date")
                        .HasColumnName("RESERVATION_DATE")
                        .HasColumnOrder(3);

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCHEDULE_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("ReservationId");

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("APP_RESERVATION", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ROLE_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("CONCURRENCY_STAMP")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NAME")
                        .HasColumnOrder(2);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NORMALIZED_NAME")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("APP_ROLE", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CLAIM_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("CLAIM_TYPE")
                        .HasColumnOrder(3);

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("CLAIM_VALUE")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ROLE_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("APP_ROLE_CLAIM", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ROUTE_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnOrder(2);

                    b.Property<int>("DestinationPointId")
                        .HasColumnType("int")
                        .HasColumnName("DESTINATION_POINT_ID")
                        .HasColumnOrder(4);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<int>("OriginPointId")
                        .HasColumnType("int")
                        .HasColumnName("ORIGIN_POINT_ID")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("RouteId");

                    b.HasIndex("DestinationPointId");

                    b.HasIndex("OriginPointId");

                    b.ToTable("APP_ROUTE", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SCHEDULE_ID")
                        .HasColumnOrder(1);

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasMaxLength(5)
                        .HasColumnType("time(5)")
                        .HasColumnName("ARRIVAL_TIME")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasMaxLength(5)
                        .HasColumnType("time(5)")
                        .HasColumnName("DEPARTURE_TIME")
                        .HasColumnOrder(2);

                    b.Property<TimeSpan>("Duration")
                        .HasMaxLength(5)
                        .HasColumnType("time(5)")
                        .HasColumnName("DURATION")
                        .HasColumnOrder(4);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<int>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("ROUTE_ID")
                        .HasColumnOrder(5);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VEHICLE_ID")
                        .HasColumnOrder(6);

                    b.HasKey("ScheduleId");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("APP_SCHEDULE", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("ACCESS_FAILED_COUNT")
                        .HasColumnOrder(17);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("CONCURRENCY_STAMP")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("EMAIL")
                        .HasColumnOrder(6);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("EMAIL_CONFIRMED")
                        .HasColumnOrder(8);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("FIRST_NAME")
                        .HasColumnOrder(2);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("LAST_NAME")
                        .HasColumnOrder(3);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("LOCKOUT_ENABLED")
                        .HasColumnOrder(16);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LOCKOUT_END")
                        .HasColumnOrder(15);

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NORMALIZED_EMAIL")
                        .HasColumnOrder(7);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NORMALIZED_USERNAME")
                        .HasColumnOrder(5);

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PASSWORD_HASH")
                        .HasColumnOrder(9);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PHONE_NUMBER")
                        .HasColumnOrder(12);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("PHONE_NUMBER_CONFIRMED")
                        .HasColumnOrder(13);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("SECURITY_STAMP")
                        .HasColumnOrder(10);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("TWO_FACTOR_ENABLED")
                        .HasColumnOrder(14);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("USERNAME")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("IDX_APP_USER_NORMALIZED_EMAIL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("IDX_APP_USER_NORMALIZED_USERNAME")
                        .HasFilter("[NORMALIZED_USERNAME] IS NOT NULL");

                    b.ToTable("APP_USER", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CLAIM_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("CLAIM_TYPE")
                        .HasColumnOrder(3);

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("CLAIM_VALUE")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IDX_APP_USER_CLAIM_USER_ID");

                    b.ToTable("APP_USER_CLAIM", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("LOGIN_PROVIDER")
                        .HasColumnOrder(1);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PROVIDER_KEY")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PROVIDER_DISPLAY_NAME")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(4);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IDX_APP_USER_LOGIN_USER_ID");

                    b.ToTable("APP_USER_LOGIN", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ROLE_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IDX_APP_USER_ROLE_ROLE_ID");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IDX_APP_USER_ROLE_USER_ID");

                    b.ToTable("APP_USER_ROLE", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("LOGIN_PROVIDER")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("NAME")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("VALUE")
                        .HasColumnOrder(4);

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IDX_APP_USER_TOKEN_USER_ID");

                    b.ToTable("APP_USER_TOKEN", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VEHICLE_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("CAPACITY")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("LICENCE_PLATE")
                        .HasColumnOrder(3);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("MANUFACTURER_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("Model")
                        .HasColumnType("int")
                        .HasColumnName("MODEL")
                        .HasColumnOrder(4);

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("VehicleId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("APP_VEHICLE", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DEPARTMENT_ID")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnOrder(2);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("CityId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("BAS_CITY", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DEPARTMENT_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnOrder(2);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("DepartmentId");

                    b.ToTable("BAS_DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.IdentificationType", b =>
                {
                    b.Property<int>("IdentificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDENTIFICATION_TYPE_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentificationTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnOrder(2);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("IdentificationTypeId");

                    b.ToTable("BAS_IDENTIFICATION_TYPE", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MANUFACTURER_ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreationUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CREATION_USER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnOrder(2);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UPDATE_USER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("ManufacturerId");

                    b.ToTable("BAS_MANUFACTURER", (string)null);
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Point", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.Bas.City", "City")
                        .WithMany("Points")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_POINT_CITY_ID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Reservation", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.Bas.IdentificationType", "IdentificationType")
                        .WithMany("Reservations")
                        .HasForeignKey("IdentificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_RESERVATION_IDENTIFICATION_TYPE_ID");

                    b.HasOne("GoTransport.Domain.Entities.App.Schedule", "Schedule")
                        .WithMany("Reservations")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_RESERVATION_SCHEDULE_ID");

                    b.Navigation("IdentificationType");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.RoleClaim", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_APP_ROLE_CLAIM_ROLE_ID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Route", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.Point", "DestinationPoint")
                        .WithMany("DestinationRoutes")
                        .HasForeignKey("DestinationPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_ROUTE_DESTINATION_POINT_ID");

                    b.HasOne("GoTransport.Domain.Entities.App.Point", "OriginPoint")
                        .WithMany("OriginRoutes")
                        .HasForeignKey("OriginPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_ROUTE_ORIGIN_POINT_ID");

                    b.Navigation("DestinationPoint");

                    b.Navigation("OriginPoint");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Schedule", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.Route", "Route")
                        .WithMany("Schedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_SCHEDULE_ROUTE_ID");

                    b.HasOne("GoTransport.Domain.Entities.App.Vehicle", "Vehicle")
                        .WithMany("Schedules")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_SCHEDULE_VEHICLE_ID");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserClaim", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_APP_USER_CLAIM_USER_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserLogin", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_APP_USER_LOGIN_USER_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserRole", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_USER_ROLE_ROLE_ID");

                    b.HasOne("GoTransport.Domain.Entities.App.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_USER_ROLE_USER_ID");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.UserToken", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.App.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_APP_USER_TOKEN_USER_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Vehicle", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.Bas.Manufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_APP_VEHICLE_MANUFACTURER_ID");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.City", b =>
                {
                    b.HasOne("GoTransport.Domain.Entities.Bas.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Point", b =>
                {
                    b.Navigation("DestinationRoutes");

                    b.Navigation("OriginRoutes");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Route", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Schedule", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.App.Vehicle", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.City", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.IdentificationType", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("GoTransport.Domain.Entities.Bas.Manufacturer", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
